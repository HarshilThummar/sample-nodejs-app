on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'
      - name: Log in to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Generate Docker image metadata
        id: image-metadata
        uses: docker/metadata-action@v4
        with:
          images: '${{ steps.ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}'
          tags: |
            type=ref,event=branch
            type=sha,format=short,prefix=${{ github.ref_name }}-
      - name: Extract first tag
        id: extract-tag
        run: >-
          echo "first_tag=$(echo '${{ steps.image-metadata.outputs.tags }}' |
          head -n 1)" >> $GITHUB_OUTPUT
      - name: Build Docker image
        run: 'docker build -t ${{ steps.extract-tag.outputs.first_tag }} .'
        
      # - name: Scan Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ steps.extract-tag.outputs.first_tag }}'
      #     format: table
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      - name: Scan Docker image with Trivy
        run: |
          echo "üîç Scanning Docker image: ${{ steps.extract-tag.outputs.first_tag }}"
          trivy image --exit-code 1 \
            --ignore-unfixed \
            --severity CRITICAL,HIGH \
            --vuln-type os,library \
            --format table \
            "${{ steps.extract-tag.outputs.first_tag }}"

          
      - name: Push Docker image to Amazon ECR
        run: 'docker push ${{ steps.extract-tag.outputs.first_tag }}'

